openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

servers:
  - url: /api

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        version:
          type: number
          example: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'The Show Must Go On'
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: Duration in seconds
          example: 262
      required:
        - id
        - name
        - duration
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

paths:
  /login:
    post:
      tags:
        - Authentication
      summary: Login to the service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: 'TestUser'
                password:
                  type: string
                  example: 'password123'
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'JWT-token'
        403:
          description: Incorrect login or password

  /signup:
    post:
      tags:
        - Authentication
      summary: Sign up a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created
        400:
          description: Bad request
        409:
          description: Login already exists

  /users:
    get:
      tags:
        - Users
      summary: Retrieve all users
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - Users
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get a user by ID
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
    put:
      tags:
        - Users
      summary: Update user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        200:
          description: Password updated successfully
        403:
          description: Old password is incorrect
        404:
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete a user
      responses:
        204:
          description: User deleted

  /artists:
    get:
      tags:
        - Artists
      summary: Get all artists
      responses:
        200:
          description: List of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
    post:
      tags:
        - Artists
      summary: Add an artist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
      responses:
        201:
          description: Artist created

  /artists/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Artists
      summary: Get an artist by ID
      responses:
        200:
          description: Artist details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
    delete:
      tags:
        - Artists
      summary: Delete an artist
      responses:
        204:
          description: Artist deleted

  /albums:
    get:
      tags:
        - Albums
      summary: Get all albums
      responses:
        200:
          description: List of albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
    post:
      tags:
        - Albums
      summary: Add an album
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
      responses:
        201:
          description: Album created

  /albums/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Albums
      summary: Get an album by ID
      responses:
        200:
          description: Album details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
    delete:
      tags:
        - Albums
      summary: Delete an album
      responses:
        204:
          description: Album deleted

  /tracks:
    get:
      tags:
        - Tracks
      summary: Get all tracks
      responses:
        200:
          description: List of tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
    post:
      tags:
        - Tracks
      summary: Add a track
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        201:
          description: Track created

  /tracks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Tracks
      summary: Get a track by ID
      responses:
        200:
          description: Track details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
    delete:
      tags:
        - Tracks
      summary: Delete a track
      responses:
        204:
          description: Track deleted

  /favs:
    get:
      tags:
        - Favorites
      summary: Get all favorites
      responses:
        200:
          description: List of favorite artists, albums, and tracks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'

  /favs/artist/{id}:
    post:
      tags:
        - Favorites
      summary: Add an artist to favorites
      responses:
        201:
          description: Artist added to favorites
    delete:
      tags:
        - Favorites
      summary: Remove an artist from favorites
      responses:
        204:
          description: Artist removed from favorites

  /favs/album/{id}:
    post:
      tags:
        - Favorites
      summary: Add an album to favorites
      responses:
        201:
          description: Album added to favorites
    delete:
      tags:
        - Favorites
      summary: Remove an album from favorites
      responses:
        204:
          description: Album removed from favorites

  /favs/track/{id}:
    post:
      tags:
        - Favorites
      summary: Add a track to favorites
      responses:
        201:
          description: Track added to favorites
    delete:
      tags:
        - Favorites
      summary: Remove a track from favorites
      responses:
        204:
          description: Track removed from favorites
